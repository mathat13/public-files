- This project effectively builds a main application and a test application
- The testing and source code are separated into their own directories and linked to each other 
by relative paths to header files
-  unity.c and unity.h and unity_internals.h are all that is required for unity to work correctly
- We separate the main.c from the functions.c to avoid a redefinition of main when building 
the test application
- CMakePresets.json has been previously generated by CMakeTools on VSCode, 
see my guide for how to set it up
- CMakeLists.txt is quite  standard, we use general commands to generate the build files, 
link all relevant directories to each application, and set a flag to make sure we can integrate
 with clangd for Intellisense
- If any other project structure is required, just make sure to change the locations to the header files 
in each file and add any required directories to cmakelists.txt (the add_executable() and 
target_include_directories() definitions).
- Executables can be built individually with:

cmake --preset=mingw64_preset -S . -B build
cmake --build build --target (HelloWorld | Tests)

- Or together by excluding the --target flag, this also integrates with CMakeTools in VSCode